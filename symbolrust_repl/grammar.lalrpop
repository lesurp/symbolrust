use std::str::FromStr;
use symbolrust::prelude::{Multiplication, Addition, Constant, Variable, Node, Context};
use super::UserInput;

grammar(c: &mut Context);

pub Line: UserInput = {
    <Var> "=" <Expr> => UserInput::Assignment(<>),
    Expr => UserInput::Expr(<>),
}

Expr: Node = {
    #[precedence(level="0")] // Highest precedence
    Term,
    #[precedence(level="1")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => (Multiplication::from_binary::<_, _, false>(l, r).into()),
    <l:Expr> "/" <r:Expr> => (Multiplication::from_binary::<_, _, true>(l, r).into()),
    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => (Addition::from_binary::<_, _, false>(l, r).into()),
    <l:Expr> "-" <r:Expr> => (Addition::from_binary::<_, _, true>(l, r).into()),
};

Term: Node = {
    Integer => <>.into(),
	Float => <>.into(),
	Var => <>.into(),
    "(" <Expr> ")",
};

Integer: Constant = r"[0-9]+" => Constant::new(i64::from_str(<>).unwrap());
Float: Constant = r"[0-9]+\.[0-9]+(e-?[0-9])?" => Constant::new(f64::from_str(<>).unwrap());
Var: Variable = r"[a-zA-z][a-zA-Z_]*" => c.new_var(<>);
